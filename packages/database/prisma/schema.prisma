datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

generator zod {
    provider         = "zod-prisma-types"
    output           = "./zod"
    createInputTypes = true
    addIncludeType   = false
    addSelectType    = false
}

generator json {
    provider = "prisma-json-types-generator"
}

model User {
    id                 String       @id @default(cuid())
    name               String
    email              String
    emailVerified      Boolean
    image              String?
    createdAt          DateTime
    updatedAt          DateTime
    username           String?
    role               String?
    banned             Boolean?
    banReason          String?
    banExpires         DateTime?
    onboardingComplete Boolean      @default(true)
    paymentsCustomerId String?
    locale             String?
    twoFactorEnabled   Boolean?
    completedTours     String[]     @default([])
    
    // Monthly word limit tracking
    monthlyWordLimit   Int          @default(1000)   // Default 1k words per month for new users
    
    sessions           Session[]
    accounts           Account[]
    passkeys           Passkey[]
    invitations        Invitation[]
    purchases          Purchase[]
    members            Member[]
    twofactors         TwoFactor[]
    aiChats            AiChat[]
    humanizerUsages    HumanizerUsage[]
    detectorUsages     DetectorUsage[]
    summariserUsages   SummariserUsage[]
    paraphraserUsages  ParaphraserUsage[]
    monthlyUsages      MonthlyUsage[]

    @@unique([email])
    @@unique([username])
    @@map("user")
}

model Session {
    id        String   @id @default(cuid())
    expiresAt DateTime
    ipAddress String?
    userAgent String?
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    impersonatedBy String?

    activeOrganizationId String?

    token     String
    createdAt DateTime
    updatedAt DateTime

    @@unique([token])
    @@map("session")
}

model Account {
    id           String    @id @default(cuid())
    accountId    String
    providerId   String
    userId       String
    user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    accessToken  String?   @db.Text
    refreshToken String?   @db.Text
    idToken      String?   @db.Text
    expiresAt    DateTime?
    password     String?

    accessTokenExpiresAt  DateTime?
    refreshTokenExpiresAt DateTime?
    scope                 String?
    createdAt             DateTime
    updatedAt             DateTime

    @@map("account")
}

model Verification {
    id         String   @id @default(cuid())
    identifier String
    value      String   @db.Text
    expiresAt  DateTime

    createdAt DateTime?
    updatedAt DateTime?

    @@map("verification")
}

model Passkey {
    id           String    @id @default(cuid())
    name         String?
    publicKey    String
    userId       String
    user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    credentialID String
    counter      Int
    deviceType   String
    backedUp     Boolean
    transports   String?
    createdAt    DateTime?

    @@map("passkey")
}

model TwoFactor {
    id          String @id @default(cuid())
    secret      String
    backupCodes String
    userId      String
    user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("twoFactor")
}

model Organization {
    id                 String               @id @default(cuid())
    name               String
    slug               String?
    logo               String?
    createdAt          DateTime
    metadata           String?
    paymentsCustomerId String?
    
    // Credit tracking
    creditBalance      Int                  @default(0)      // Current credit balance
    lastCreditReset    DateTime?                             // When credits were last reset (for recurring subscriptions)
    nextCreditReset    DateTime?                             // When credits will next reset (for recurring subscriptions)
    
    // Automation defaults
    defaultAutoProcess Boolean @default(false)     // Default automation setting for new posts
    defaultCheckInterval Int   @default(24)        // Default check interval in hours
    defaultCommentLimit Int   @default(3500)       // Default comment limit for new posts
    
    members            Member[]
    invitations        Invitation[]
    purchases          Purchase[]
    aiChats            AiChat[]
    creditTransactions CreditTransaction[]

    @@unique([slug])
    @@map("organization")
}

model AiChat {
    id             String        @id @default(cuid())
    organizationId String?
    organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    userId         String?
    user           User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
    title          String?
    messages       Json?
    createdAt      DateTime      @default(now())
    updatedAt      DateTime?     @updatedAt

    @@map("aiChat")
}


model Member {
    id             String       @id @default(cuid())
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    userId         String
    user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    role           String
    createdAt      DateTime

    @@unique([organizationId, userId])
    @@map("member")
}

model Invitation {
    id             String       @id @default(cuid())
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    email          String
    role           String?
    status         String
    expiresAt      DateTime
    inviterId      String
    user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

    @@map("invitation")
}

enum PurchaseType {
    SUBSCRIPTION
    ONE_TIME
}

model Purchase {
    id             String        @id @default(cuid())
    organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    organizationId String?
    user           User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId         String?
    type           PurchaseType
    customerId     String
    subscriptionId String?       @unique
    productId      String
    status         String?
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt

    @@index([subscriptionId])
    @@map("purchase")
}

enum CreditTransactionType {
    PURCHASE_ONETIME    // One-time credit purchase
    PURCHASE_RECURRING  // Monthly credit refill
    USAGE               // Credit usage (comment analysis)
    RESET               // Monthly reset for recurring subscriptions
    ADJUSTMENT          // Manual adjustment (support/refund)
}

model CreditTransaction {
    id             String                @id @default(cuid())
    organizationId String
    organization   Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    type           CreditTransactionType
    amount         Int                   // Positive for credits added, negative for credits used
    balance        Int                   // Balance after this transaction
    description    String?               // Optional description
    purchaseId     String?               // Reference to purchase if applicable
    createdAt      DateTime              @default(now())
    
    @@index([organizationId])
    @@index([type])
    @@index([createdAt])
    @@map("credit_transaction")
}

model HumanizerUsage {
    id               String    @id @default(cuid())
    userId           String
    user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    // Encrypted content - stored as JSON string with iv, authTag
    encryptedContent String    @db.Text  // Contains {inputText, outputText}
    
    // Non-sensitive metadata
    tone             String?
    wordCount        Int
    charactersUsed   Int
    creditsUsed      Int?
    
    // Auto-deletion for GDPR compliance
    expiresAt        DateTime?
    createdAt        DateTime  @default(now())
    
    @@index([userId])
    @@index([createdAt])
    @@index([expiresAt])
    @@map("humanizer_usage")
}

model DetectorUsage {
    id               String    @id @default(cuid())
    userId           String
    user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    // Encrypted content - stored as JSON string with iv, authTag
    encryptedContent String    @db.Text  // Contains {inputText}
    
    // Non-sensitive metadata
    aiProbability    Float     // Probability score (0-1)
    detectionResult  String    // "Human", "AI", "Mixed"
    wordCount        Int
    charactersUsed   Int
    creditsUsed      Int?
    
    // Auto-deletion for GDPR compliance
    expiresAt        DateTime?
    createdAt        DateTime  @default(now())
    
    @@index([userId])
    @@index([createdAt])
    @@index([expiresAt])
    @@map("detector_usage")
}

model SummariserUsage {
    id               String    @id @default(cuid())
    userId           String
    user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    // Encrypted content - stored as JSON string with iv, authTag
    encryptedContent String    @db.Text  // Contains {inputText, summaryText}
    
    // Non-sensitive metadata
    summaryType      String?   // Brief, Detailed, Key Points
    wordCount        Int
    charactersUsed   Int
    creditsUsed      Int?
    
    // Auto-deletion for GDPR compliance
    expiresAt        DateTime?
    createdAt        DateTime  @default(now())
    
    @@index([userId])
    @@index([createdAt])
    @@index([expiresAt])
    @@map("summariser_usage")
}

model ParaphraserUsage {
    id               String    @id @default(cuid())
    userId           String
    user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    // Encrypted content - stored as JSON string with iv, authTag
    encryptedContent String    @db.Text  // Contains {inputText, paraphrasedText}
    
    // Non-sensitive metadata
    style            String?   // Formal, Casual, Academic, Creative
    wordCount        Int
    charactersUsed   Int
    creditsUsed      Int?
    
    // Auto-deletion for GDPR compliance
    expiresAt        DateTime?
    createdAt        DateTime  @default(now())
    
    @@index([userId])
    @@index([createdAt])
    @@index([expiresAt])
    @@map("paraphraser_usage")
}

model MonthlyUsage {
    id           String   @id @default(cuid())
    userId       String
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    month        Int      // 1-12
    year         Int      // 2024, 2025, etc
    totalWords   Int      @default(0)
    
    // Track usage by tool type
    humanizerWords    Int @default(0)
    detectorWords     Int @default(0)
    summariserWords   Int @default(0)
    paraphraserWords  Int @default(0)
    
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    
    @@unique([userId, month, year])
    @@index([userId])
    @@index([month, year])
    @@map("monthly_usage")
}


